--create and define a table 
--primary key is the main reference sql will use
CREATE TABLE employee(
    emp_id INT PRIMARY KEY,
    first_name VARCHAR(40),
    last_name VARCHAR(40),
    birth_day DATE,
    sex VARCHAR(40),
    salary INT,
    super_id INT,
    branch_id INT
);

--create and define a table with a foreign key
CREATE TABLE branch(
    branch_id INT PRIMARY KEY,
    branch_name VARCHAR(40),
    mgr_id INT,
    mgr_start_date DATE,
    FOREIGN KEY(mgr_id) REFERENCES employee(emp_id) ON DELETE SET NULL
);

--now that the correlating table has been made,
--alter table to reference new table w/ foreign key
ALTER TABLE employee
ADD FOREIGN KEY(branch_id)
REFERENCES branch(branch_id)
ON DELETE SET NULL;

--same for a different key(referencing itself)
ALTER TABLE employee
ADD FOREIGN KEY(super_id)
REFERENCES employee(emp_id)
ON DELETE SET NULL;

--new table
CREATE TABLE _client(
    client_id INT PRIMARY KEY,
    client_name VARCHAR(40),
    branch_id INT,
    FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE SET NULL
);

--new table
CREATE TABLE works_with(
    emp_id INT,
    client_id INT,
    total_sales INT,
    PRIMARY KEY(emp_id, client_id),
    FOREIGN KEY(emp_id) REFERENCES employee(emp_id) ON DELETE CASCADE,
    FOREIGN KEY(client_id) REFERENCES _client(client_id) ON DELETE CASCADE
);


--new table
CREATE TABLE branch_supplier(
    branch_id INT,
    supplier_name VARCHAR(40),
    supply_type VARCHAR(40),
    PRIMARY KEY(branch_id, supplier_name),
    FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE CASCADE
);

--have to insert manager into employee table first
--have to start with the top manager since that record
--is the one root of the reference tree
INSERT INTO employee VALUES(100,'David','Wallace','1967-11-17','M',250000, NULL, NULL);

--then insert head branch 
INSERT INTO branch VALUES(1,'Corporate',100,'2006-02-09');

--now update employee table to correctly reference branch table
UPDATE employee
SET branch_id = 1
WHERE emp_id = 100;

--lastly insert the rest of this branch's employees
INSERT INTO employee VALUES(101,'Jan', 'Levinson','1961-05-11','F',110000,100,1);

--repeat above process for new branch
--insert manager
INSERT INTO employee VALUES(102,'Michael','Scott','1964-03-15','M',75000,100,NULL);
--insert branch
INSERT INTO branch VALUES(2,'Scranton',102,'1992-04-06');
--update manger
UPDATE employee
SET branch_id = 2
WHERE emp_id = 102;
--insert employees
INSERT INTO employee VALUES(103,'Angela','Martin','1971-06-25','F',63000,102,2);
INSERT INTO employee VALUES(104,'Kelly','Kpoor','1980-02-05','F',55000,102,2);
INSERT INTO employee VALUES(105,'Stanley','Hudson','1958-02-19','M',69000,102,2);

--and the last branch
INSERT INTO employee VALUES(106,'Josh','Porter','1969-09-05','M',78000,100,NULL);
INSERT INTO branch VALUES(3,'Stamford',106,'1998-02-13');
UPDATE employee
SET branch_id = 3
WHERE emp_id = 106;
INSERT INTO employee VALUES(108,'Jim','Halpert','1978-10-01','M',71000,106,3);
INSERT INTO employee VALUES(107,'Andy','Bernard','1973-07-22','M',65000,106,3);

--insert all branch supplier data 
INSERT INTO branch_supplier VALUES(2,'Hammer Mill','Paper');
INSERT INTO branch_supplier VALUES(2,'Uni-ball','Writing Utensils');
INSERT INTO branch_supplier VALUES(3,'Partiot Paper','Paper');
INSERT INTO branch_supplier VALUES(2,'J.T.Forms & Lables','Custom Forms');
INSERT INTO branch_supplier VALUES(3,'Uni-ball','Writing Utensils');
INSERT INTO branch_supplier VALUES(3,'Hammer Mill','Paper');
INSERT INTO branch_supplier VALUES(3,'Stamford Lables','Custom Lables');

--insert all client data
INSERT INTO _client VALUES(400,'Dunmore Highschool',2);
INSERT INTO _client VALUES(401,'Lackawana Country',2);
INSERT INTO _client VALUES(402,'FedEx',3);
INSERT INTO _client VALUES(403,'John Daly Law, LLC',3);
INSERT INTO _client VALUES(404,'Scranton Whitepages',2);
INSERT INTO _client VALUES(405,'Times Newspaper',3);
INSERT INTO _client VALUES(406,'FedEx',2);

--insert all account data
INSERT INTO works_with VALUES(105,400,55000);
INSERT INTO works_with VALUES(102,401,267000);
INSERT INTO works_with VALUES(108,402,22500);
INSERT INTO works_with VALUES(107,403,5000);
INSERT INTO works_with VALUES(108,403,12000);
INSERT INTO works_with VALUES(105,404,33000);
INSERT INTO works_with VALUES(107,405,26000);
INSERT INTO works_with VALUES(102,406,15000);
INSERT INTO works_with VALUES(105,406,130000);

--select and distinct keyword ex
SELECT DISTINCT salary FROM employee;


--#########functions###########

--find the number of employees
SELECT COUNT(emp_id) FROM employee;

--find the number of female emp. born after 1970
SELECT COUNT(emp_id) FROM employee
WHERE sex = 'F' AND birth_day > '1970-01-01';

--find the avg of all male emp salaries who work for emp_id = 102 
SELECT AVG(salary) FROM employee
WHERE sex = 'M' AND super_id = 102;

--find the sum of all emp salary
SELECT SUM(salary) FROM employee;

--aggregation
--find out how many males and how many females there are
SELECT COUNT(sex), sex FROM employee
GROUP BY sex;

--find the total sales of each salesman
SELECT SUM(total_sales), emp_id FROM works_with
GROUP BY emp_id;

--find the total spending of each client
SELECT SUM(total_sales), client_id FROM works_with
GROUP BY client_id;

--########wildcards########

--find any clients who are an LLC
--% indicates any number of char 
--so allow any number of char then 
--find 'LLC' 
SELECT * FROM _client
WHERE client_name LIKE '%LLC';

--find any branch suppliers who are in the label business
--% allow any num of char then query then any num of char
SELECT * FROM branch_supplier
WHERE supplier_name LIKE '%Lables%';

--find any employee born in October
--'_' indicates a single char so use the 
--formating of dates to ignore a certain 
--number of char and find the query
SELECT * FROM employee
WHERE birth_day LIKE '____-10%';

--find any clients who are schools
SELECT * FROM _client
WHERE client_name LIKE '%school%' OR client_name LIKE '%School%';

--###### unions ########
--have to query the same number of cols 
--have to have similar data types

--find a list of employee and branch names
SELECT first_name FROM employee
UNION 
SELECT branch_name FROM branch;

--find a list of all clients & branch supplier names
--good practice to prefix the similar term 'branch_id'
--with the table it came from to mitigate confusion
SELECT client_name, _client.branch_id 
FROM _client 
UNION
SELECT supplier_name, branch_supplier.branch_id 
FROM branch_supplier;


--find a list of all money spent or earned by the company
SELECT SUM(salary) 
FROM employee
UNION
SELECT SUM(total_sales) 
FROM works_with;


--####### joins ##########
-- combine rows from two or more tables 
-- with common columns

--insert another branch 
INSERT INTO branch VALUES(4,'Buffalo',NULL,NULL);

--join ex
--find all branches and the names of their managers
--inner join
SELECT employee.emp_id, employee.first_name, branch.branch_name
FROM employee
JOIN branch
ON employee.emp_id = branch.mgr_id;

--left join
--includes all rows from employee table and returns NULL where applicable
SELECT employee.emp_id, employee.first_name, branch.branch_name
FROM employee
LEFT JOIN branch
ON employee.emp_id = branch.mgr_id;

--right join 
--includes all rows from branch 
SELECT employee.emp_id, employee.first_name, branch.branch_name
FROM employee
RIGHT JOIN branch
ON employee.emp_id = branch.mgr_id;


--which employees hold which client account
SELECT employee.first_name, _client.client_name
FROM employee
JOIN works_with
JOIN _client
ON employee.emp_id = works_with.emp_id 
AND works_with.client_id = _client.client_id;



--######## nested queries #########
--multiple select statements 

--find names of all employees who have sold
--over 30000 to a single client
SELECT employee.first_name, employee.last_name
FROM employee
WHERE employee.emp_id IN(
    SELECT works_with.emp_id 
    FROM works_with
    WHERE works_with.total_sales > 30000
);

--find all clients who are handled by the branch
--that Michael Scott manages
--assume you know Michael's ID
SELECT _client.client_name
FROM _client
WHERE _client.branch_id = (
    /*if the nested portion will return multiple
    values we would need to either use the key
    word LIMIT to return one value or use the 
    keyword IN where the '=' is if multiple 
    values are desired
    --*/ 
    SELECT branch.branch_id
    FROM branch
    WHERE branch.mgr_id = 102
);


--############ on delete ##########
-- ON DELETE SET NULL will set all values in 
-- related tables to null 
-- mainly for non primary keys

--ON DELETE CASCADE will delete all associated 
--rows instead of setting null values
--mainly for primary keys


--########## triggers #############


CREATE TABLE trigger_test(
    message VARCHAR(100)
);


DELIMITER $$
CREATE
    TRIGGER my_trigger1 BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
        INSERT INTO trigger_test VALUES(NEW.first_name);
    END $$
DELIMITER ;

INSERT INTO employee
VALUES(109,'Oscar','Martinez', '1968-02-19', 'M',69000,106,3);

INSERT INTO employee
VALUES(110,'Kevin','Malone', '1978-02-19','M',69000,106,3);

SELECT * FROM trigger_test;


DELIMITER $$
CREATE 
    TRIGGER my_trigger2 BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
        IF NEW.sex = 'M' THEN
            INSERT INTO trigger_test VALUES('added male employee');
        ELSEIF NEW.SEX = 'F' THEN
            INSERT INTO trigger_test VALUES('added female employee');
        ELSE 
            INSERT INTO trigger_test VALUES('added other employee');
        END IF;
    END$$
DELIMITER ;


INSERT INTO employee 
VALUES(111,'Pam','Beesly','1988-02-19','F',69000,106,3);

SELECT * FROM trigger_test;